Python
    语法子集
        数据类型与运算
        TODO
    抽象
        组合逻辑
            变量重命名
            TODO
        时序逻辑
            状态/寄存器声明方法
            TODO
        模块与接口
            函数执行一次就是一个时钟周期（？）
                这样和常规意义的程序应该有所冲突，即函数的划分影响了程序执行
                TODO
            TODO
    仿真
        TODO

结构（名称待定）
    抽象
        模块
            统一朴素时序电路描述（寄存器 + 组合逻辑）
                数据类型是类型类，运算类型也是类型类。
                [x] 用 Node 封装一个节点，内部存有类型，例如数据、寄存器、操作。
                    修改：考虑可嵌套性，应该都统一为模块/节点。
                    需要专门存有寄存器吗？似乎不需要，
                部分存有参数，例如预计执行耗时（芯片模型？）、该模块是否可拆（可流水化，例如比较耗时的乘法运算）及其方法（需要设计一下）。
                    ... 或许乘法这类耗时操作也可以都用基本运算构建在内部（而不是手动构建类似之前 template 的东西），
                    ... 然后其展开后的流水化也使用自动流水线插入，一起处理，
                    ... 这涉及到模块/节点的可嵌套问题，需要仔细考虑。
                    ... 如果这样的话，基础运算或许可以只考虑逻辑门运算？加减比较快或许直接映射到 VHDL 的加减也行。
                        ... 人为设计受限于结构的可读性，级数划分不那么自由，但实际上都是一团组合逻辑，可以很自由！
                        ... 这样的话结构可细分，问题就变成如何在“结构”表示下生成不定位数的各类运算了。
            外延
                状态机（考虑两种）
                    广义上都可以视为状态机，区分出部分从设计阶段起就是状态机的设计，可能可以像流水线一样辅助生成
                    TODO
                纯组合逻辑
                    无状态
                    输出需要寄存器吗（？）
                    TODO
                流水线（可由纯组合逻辑转化得到）
                    暂停
                        外部指示的暂停
                        以及内部指示的暂停
                            [!] 例如某级提出的异步访存的结果在需要时还未送达
                                ... 如何标记该类 Node？
                    每级数据有效性
                        与暂停结合，可以实现选择直接暂停或是插入空泡
                        可以实现流水线冲刷（全部置为无效，考虑一下边缘条件，即刚进入的数据和马上要出去的数据）
                        需要配合 ready-valid 握手，这部分应当都是自动的
                    将数据视为“数据包”的可能性
                        ... 即是视为“一组数据经过不同步骤的处理”而非“经过各级处理每步得到新的数据，具有各自的来源”
                        或许可以帮助到数据间有关联的结构的抽象层次设计
                    TODO
                其他（还有什么其他值得单独划分的特殊时序电路）
                TODO
        通信
            异步 FIFO
            ready-valid 握手
            TODO
        存储
            TODO
        IO
            TODO

VHDL
    文件划分
    通用模块生成（例如 x 位与 y 位无符号整数的乘法、指定位置的切片操作等）
    平台相关的硬件原语
    TODO

可以深入的点
    Python 转结构
        嵌入 Python 的框架设计
        典型基础结构分析
            流水线输出数据影响数据输入（例如 FmcPGA 中的光线步进计算）
                每次“调用”组合逻辑不一定例化一个新的，或可通过某些方式运行一遍得知其不干扰从而充分利用
                TODO
            流水线中需要访存
                访存可以流水化的话（是否有专业名词，即可以依次给出一串访问输入，不前后影响地得到一串输出，不可以的话没有流水化的意义），
                    ... 考虑合理安排访存操作以及其结果需要被使用的时间
                TODO
            流水线前后数据包有关联（例如流水线 CPU 的 forwarding 设计）
                TODO
            TODO
    纯组合逻辑结构转流水线结构的算法
        注意
            TODO 自动流水线插入算法（Pipeline Insertion），查找论文
            HLS 也有自动流水化，PipelineC 里头的 pragma 格式和那很像
            [!] 有些组合逻辑拆开了反而不利于化简，导致面积增大
            [!] 按级数进行/按预期时钟周期进行？
                ... 除了关于时钟频率的参数，还要考虑资源使用量。
                ... 优化算法？
                ... 需要模型！芯片的仿真模型！没有的话如何替代？
        图结构
        时序、时钟频率计算
        资源分配
        TODO
    可读性
        TODO
    流水化的状态机
        TODO
    TODO
